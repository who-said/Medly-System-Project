#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_TCS34725.h>
Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_2_4MS, TCS34725_GAIN_1X);

#define MOT_A1_PIN 5
#define MOT_A2_PIN 6
#define MOT_B1_PIN 9
#define MOT_B2_PIN 10

boolean reverseL = 0;
boolean reverseR = 0;

/* variables to keep track of current speed of motors */
int leftServoSpeed = 0;
int rightServoSpeed = 0;

// Variable for buzzer
const int Buzzer = 8;

// Variables for HC-SR04
int trigPin = 12;  // trig pin of HC-SR04
int echoPin = 11;  // Echo pin of HC-SR04
long uduration, distance;

// Variables for LEDs
int GreenLED = 3;
int RedLED = 2;

//Variables for command and color assingment
char rkeypadValue[5];
int keypadValue = 0;
char* yellow = "1";
char* blue = "2";
char* move = "3";
int colorValue;
int HomebaseValue;

/* Define the pins for the IR sensors */
const int irPins[3] = { A2, A1, A0 };

/* Define values for the IR Sensor readings */
int irSensorDigital[3] = { 0, 0, 0 };

int threshold = 250;  // IR sensor threshold value for line detection


int maxSpeed = 100;  // the range for speed is(0,255)

// binary representation of the sensor reading
// 1 when the sensor detects the line, 0 otherwise
int irSensors = B000;

// A score to determine deviation from the line [-180 ; +180].
// Negative means the robot is left of the line.
int error = 0;

int errorLast = 0;  //  store the last value of error

void setup(void) {
  // Initialize the stepper driver control pins to output drive mode.
  pinMode(GreenLED, OUTPUT);
  pinMode(RedLED, OUTPUT);

  pinMode(MOT_A1_PIN, OUTPUT);
  pinMode(MOT_A2_PIN, OUTPUT);
  pinMode(MOT_B1_PIN, OUTPUT);
  pinMode(MOT_B2_PIN, OUTPUT);

  // Start with drivers off, motors coasting.
  digitalWrite(MOT_A1_PIN, LOW);
  digitalWrite(MOT_A2_PIN, LOW);
  digitalWrite(MOT_B1_PIN, LOW);
  digitalWrite(MOT_B2_PIN, LOW);

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  // Initialize the serial UART at 9600 bits per second.
  Serial.begin(9600);
  //softwareSerial.begin(9600);

  // check for rgb sensor
  if (tcs.begin()) {
    Serial.println("Found sensor");
  } else {
    Serial.println("No TCS34725 found ... check your connections");
    while (1)
      ;
  }
}
/// Set the current on a motor channel using PWM and directional logic.
/// Changing the current will affect the motor speed, but please note this is
/// not a calibrated speed control.  This function will configure the pin output
/// state and return.
///
/// \param pwm    PWM duty cycle ranging from -255 full reverse to 255 full forward
/// \param IN1_PIN  pin number xIN1 for the given channel
/// \param IN2_PIN  pin number xIN2 for the given channel

void set_motor_pwm(int pwm, int IN1_PIN, int IN2_PIN) {
  if (pwm < 0) {  // reverse speeds
    analogWrite(IN1_PIN, -pwm);
    digitalWrite(IN2_PIN, LOW);

  } else {  // stop or forward
    digitalWrite(IN1_PIN, LOW);
    analogWrite(IN2_PIN, pwm);
  }
}

/// Set the current on both motors.
//param pwm_A  motor A PWM, -255 to 255
//param pwm_B  motor B PWM, -255 to 255

void set_motor_currents(int pwm_A, int pwm_B) {
  set_motor_pwm(pwm_A, MOT_A1_PIN, MOT_A2_PIN);
  set_motor_pwm(pwm_B, MOT_B1_PIN, MOT_B2_PIN);
}
/// Simple primitive for the motion sequence to set a speed and wait for an interval.
/// \param pwm_A  motor A PWM, -255 to 255
/// \param pwm_B  motor B PWM, -255 to 255
/// \param duration delay in milliseconds
void spin_and_wait(int pwm_A, int pwm_B, int duration) {
  set_motor_currents(pwm_A, pwm_B);
  delay(duration);
}

void Scan() {
  // Initialize the sensors
  irSensors = B000;

  for (int i = 0; i < 3; i++) {
    int sensorValue = analogRead(irPins[i]);
    if (sensorValue >= threshold) {
      irSensorDigital[i] = 1;
    }

    else {
      irSensorDigital[i] = 0;
    }

    int b = 2 - i;
    irSensors = irSensors + (irSensorDigital[i] << b);
  }
}

void UpdateDirection() {

  errorLast = error;

  switch (irSensors) {

    case B000:  // no sensor detects the line
      if (errorLast < 0) {
        error = -130;
      } else if (errorLast > 0) {
        error = 130;
      }
      break;

    case B100:  // left sensor on the line
      error = -40;
      break;

    case B110:
      error = -20;
      break;

    case B010:
      error = 0;
      break;

    case B011:
      error = 20;
      break;

    case B001:  // right sensor on the line
      error = 40;
      break;

    case B111:
      error = 1;
      break;

    default:
      error = errorLast;
  }

  if (error >= 0) {
    leftServoSpeed = maxSpeed;
    rightServoSpeed = maxSpeed - error;
  }

  else if (error < 0) {
    leftServoSpeed = maxSpeed + error;
    rightServoSpeed = maxSpeed;
  }
}



void Colorsensor() {
  uint16_t r, g, b, c;

  tcs.getRawData(&r, &g, &b, &c);

  float r_norm = (float)r / c;
  float g_norm = (float)g / c;
  float b_norm = (float)b / c;

  int r_final = r_norm * 255;
  int g_final = g_norm * 255;
  int b_final = b_norm * 255;

  if (r_final > 130 && g_final < 70 && b_final < 65) {
    Serial.println(" Red is detected)");
    // assign each number detection values. "coloV"
    colorValue = 0;
  }

  else if (r_final > 109 && g_final < 96 && b_final < 52) {
    Serial.println(" yellow is detected)");
    colorValue = 1;
  } else if (r_final < 70 && g_final < 90 && b_final > 120) {
    Serial.println(" blue is detected)");
    colorValue = 2;
  }
}


void getdistance() {
  spin_and_wait(leftServoSpeed, rightServoSpeed, 10);  // sets speed for 0.01 sec
  digitalWrite(trigPin, LOW);
  delayMicroseconds(3);
  digitalWrite(trigPin, HIGH);  // send waves for 10 us
  delayMicroseconds(3);
  uduration = pulseIn(echoPin, HIGH);  // receive reflected waves
  distance = uduration * 0.034 / 2;    // convert to distance
  //delay(10);
}

void loop() {

  colorValue = 4;
  Colorsensor();
  while (colorValue == 0 && keypadValue == 0) {
    digitalWrite(GreenLED, HIGH);
    digitalWrite(RedLED, LOW);
    leftServoSpeed = 0;
    rightServoSpeed = 0;
    digitalWrite(MOT_A2_PIN, LOW);  //Stop
    digitalWrite(MOT_A1_PIN, LOW);
    digitalWrite(MOT_B2_PIN, LOW);
    digitalWrite(MOT_B1_PIN, LOW);

    // Enterkeypad value
    if (Serial.available() > 0) {
      Serial.readBytes(rkeypadValue, 1);
      if (!(strncmp(rkeypadValue, yellow, 2))) {
        keypadValue = 1;
        Serial.println(keypadValue);
      } else if (!(strncmp(rkeypadValue, blue, 2))) {
        keypadValue = 2;
        //Serial.println(keypadValue);
      } else if (!(strncmp(rkeypadValue, move, 2))) {
        keypadValue = 3;
        // Serial.println(keypadValue);
      }
    }
    delay(300);
  }

  if (keypadValue == colorValue && keypadValue != 0) {
    tone(Buzzer, 1000);
    leftServoSpeed = 0;
    rightServoSpeed = 0;
    digitalWrite(MOT_A2_PIN, LOW);  //Stop
    digitalWrite(MOT_A1_PIN, LOW);
    digitalWrite(MOT_B2_PIN, LOW);
    digitalWrite(MOT_B1_PIN, LOW);
    delay(3000);

    leftServoSpeed = 180;
    rightServoSpeed = 10;
    digitalWrite(MOT_A2_PIN, HIGH);
    digitalWrite(MOT_A1_PIN, LOW);
    digitalWrite(MOT_B2_PIN, LOW);
    digitalWrite(MOT_B1_PIN, LOW);
    delay(200);
    keypadValue = 0;
  }
  if (keypadValue == 3 && colorValue == 0) {
    digitalWrite(MOT_A2_PIN, HIGH);  // move forward
    digitalWrite(MOT_A1_PIN, LOW);
    digitalWrite(MOT_B2_PIN, HIGH);
    digitalWrite(MOT_B1_PIN, LOW);

    keypadValue = 0;
  }



  while (distance < 18) {

    tone(Buzzer, 1000);
    delay(200);
    noTone(Buzzer);
    digitalWrite(GreenLED, LOW);
    digitalWrite(RedLED, HIGH);
    leftServoSpeed = 0;
    rightServoSpeed = 0;
    digitalWrite(MOT_A2_PIN, LOW);  //Stop
    digitalWrite(MOT_A1_PIN, LOW);
    digitalWrite(MOT_B2_PIN, LOW);
    digitalWrite(MOT_B1_PIN, LOW);
    getdistance();
  }
  noTone(Buzzer);
  digitalWrite(GreenLED, LOW);
  digitalWrite(RedLED, HIGH);
  Colorsensor();
  Scan();
  UpdateDirection();
  getdistance();
  delay(20);
}
